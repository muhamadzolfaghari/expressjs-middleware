import bcrypt from "bcrypt";
import IUser from "../../interfaces/IUser";
import * as fs from "fs";
import * as path from "path";

/**
 * A repeating number in `bcrypt` hashing progress.
 */
const SALT_ROUNDS: number = 10;

/**
 * A users file a path to keep users' data.
 */
export const USERS_FILE_PATH: string = path.resolve("./data/users.tsv");

/**
 * A random id
 * is generated by the first five numbers of the current time in milliseconds and random string in range of a-z.
 */
const generateUserId = (): string =>
  String(Date.now()).slice(5) + Math.random().toString(36).slice(2);

/**
 * A user convert into a raw string as join all members in a template string.
 * @param user a user
 */
const getRawUser = (user: IUser) =>
  `${user.id}\t${user.username}\t${user.password}\n`;

/**
 * This function is hash the password through using "bcrypt" package.
 * @param password A user password
 */
function hashPassword(password: string): string {
  const salt = bcrypt.genSaltSync(SALT_ROUNDS);
  return bcrypt.hashSync(password, salt);
}

/**
 *  Store users in data/uses.tsv to use in authentication
 * @param users The users to store in data/users.tsv
 */
function writeUses(users: Omit<IUser, "id">[]) {
  // Make sure to write and store user data
  // whenever data is not existed in a root path this firstly the data folder is added to the project.
  if (!fs.existsSync(path.resolve("./data"))) {
    fs.mkdirSync(path.resolve("./data"));
  }

  // The existed `user.tsv` file is removed from the data folder due to appending safety user in the following.
  if (fs.existsSync(USERS_FILE_PATH)) {
    fs.unwatchFile(USERS_FILE_PATH);
  }

  for (const user of users) {
    // provided user of users argument is manipulated, the password is hashed by bcrypt,
    // and the password is generated with a random string as the unique id.
    let updatedUser = { username: user.username } as IUser;
    updatedUser.password = hashPassword(user.password);
    updatedUser.id = generateUserId();

    // The updated user is written as a new record the raw data with a string type.
    fs.appendFileSync(USERS_FILE_PATH, getRawUser(updatedUser));
  }
}

/**
 * This function creates some users to use in login page.
 */
export default function createUsers() {
  // All users provided here are used in login page the omitted `id`
  // from IUser interface due to auto generation in the next step.
  const users: Omit<IUser, "id">[] = [
    { username: "administrative", password: "123456" },
  ];

  // At the next step, the users are written in the data folder as users.tsv file,
  // which used while an authentication process.
  writeUses(users);
}
